{"version":3,"sources":["todo.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DisplayInfo","todoText","index","completeTodo","removeTodo","text","className","onClick","style","cursor","textDecoration","isCompleted","TodoInput","addTodo","useState","val","setVal","console","log","type","placeholder","value","onChange","e","target","preventDefault","getIncompleteItems","getItems","Todo","savedItems","localStorage","getItem","JSON","parse","todos","setTodos","newTodos","splice","totalItems","filter","React","useEffect","setItem","stringify","length","map","todo","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gMAcMA,EAA+B,SAAC,GAA6C,IAA5CC,EAA2C,EAA3CA,SAAUC,EAAiC,EAAjCA,MAAMC,EAA2B,EAA3BA,aAAaC,EAAc,EAAdA,WAChE,MAAqB,IAAjBH,EAASI,KACF,8BAKP,yBAAKC,UAAU,QACP,wBAAIC,QAAS,kBAAIJ,EAAaD,IAAQM,MAAO,CAACC,OAAO,UACjD,wBAAID,MAAO,CAACE,eAAeT,EAASU,YAAc,eAAe,KAAjE,IAAwEV,EAASI,OAErF,4BAAQE,QAAS,kBAAIH,EAAWF,KAAhC,YAaVU,EAA2B,SAAC,GAAc,IAAbC,EAAY,EAAZA,QAAY,EACtBC,mBAAS,IADa,mBACpCC,EADoC,KAChCC,EADgC,KAE3CC,QAAQC,IAAIH,GAUZ,OACI,8BACI,2BAAOI,KAAK,OAAOC,YAAY,cAAcd,UAAU,QAAQe,MAAON,EAAKO,SAAU,SAAAC,GAAC,OAAIP,EAAOO,EAAEC,OAAOH,UAC1G,4BAAQd,QAZG,SAACgB,GAChBN,QAAQC,IAAI,qBACZK,EAAEE,iBACGV,IACLF,EAAQE,GACRE,QAAQC,IAAIH,GACZC,EAAO,OAMH,SAOZ,SAASU,EAAmBL,GACxB,OAA4B,GAArBA,EAAMV,aAAqC,IAAbU,EAAMhB,KAI/C,SAASsB,EAASN,GACd,MAAoB,IAAbA,EAAMhB,KAKV,IAAMuB,EAAgB,WAC7B,IAAIC,EAAiBC,aAAaC,QAAQ,SAC1CF,EAAaG,KAAKC,MAAMJ,GACxB,IAHiC,EAIPf,mBAAce,GADzB,CAAC,CAACxB,KAAK,GAAGM,aAAY,KAHJ,mBAI1BuB,EAJ0B,KAInBC,EAJmB,KAKjClB,QAAQC,IAAIgB,GAEZ,IAYM/B,EAAe,SAACD,GAClB,IAAMkC,EAAQ,YAAOF,GACrBE,EAASlC,GAAOS,aAAeyB,EAASlC,GAAOS,YAC/CwB,EAASC,IAGPhC,EAAa,SAACF,GAChB,IAAMkC,EAAQ,YAAOF,GACrBE,EAASC,OAAOnC,EAAM,GACtBiC,EAASC,IAEPE,EAAaJ,EAAMK,OAAOZ,GAKhC,OAJAa,IAAMC,WAAU,WACZX,aAAaY,QAAQ,QAASV,KAAKW,UAAUT,MAC5C,CAACF,KAAKW,UAAUT,KAGjB,yBAAK5B,UAAU,aAAf,2BAC6B4B,EAAMK,OAAOb,GAAoBkB,OAD9D,WAC8EN,EAAWM,OACpFV,EAAMW,KAAI,SAACC,EAAS5C,GAAV,OACP,kBAAC,EAAD,CAAcA,MAAOA,EAAOD,SAAU6C,EAAM3C,aAAcA,EAAcC,WAAYA,OAIxF,kBAAC,EAAD,CAAWS,QApCJ,SAACR,GAEZ,IAAI+B,EAAQ,sBAAOF,GAAP,CAAa,CAAE7B,KAAKA,EAAKM,aAAY,KAC1B,IAAnByB,EAAS,GAAG/B,MACZ+B,EAASC,OAAO,EAAE,GAGtBF,EAASC,QCxEEW,MARf,WACE,OACE,yBAAKzC,UAAU,OACb,kBAAC,EAAD,QCIc0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhD,QAAQgD,MAAMA,EAAMC,a","file":"static/js/main.1b9ee9ba.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport './App.css'\r\n\r\n\r\ninterface todos {\r\n    \r\n    todoText:any;\r\n    index:any\r\n    completeTodo:(index:number)=>void;\r\n    removeTodo:(index:number)=>void;\r\n}\r\n\r\n\r\n//displays the todo\r\nconst DisplayInfo: React.FC<todos> = ({todoText, index,completeTodo,removeTodo})=>{\r\n    if (todoText.text == \"\"){ \r\n        return(<div></div>);\r\n    }\r\n    else{\r\n    return(\r\n\r\n        <div className=\"todo\" >\r\n                <ul onClick={()=>completeTodo(index)} style={{cursor:'alias'}}>\r\n                    <li style={{textDecoration:todoText.isCompleted ? 'line-through':''}}> {todoText.text}</li>\r\n                </ul>\r\n                <button onClick={()=>removeTodo(index)}>\r\n                    delete\r\n                </button>\r\n     \r\n        </div>\r\n    )\r\n    }\r\n}\r\ninterface addT{\r\n    addTodo :(val:string)=>void;\r\n}\r\n\r\n//creates the inpt field and updates the value\r\nconst TodoInput: React.FC<addT>= ({addTodo})=> {\r\n    const [val,setVal] = useState('');\r\n    console.log(val);\r\n    const submitForm = (e:any) => {\r\n        console.log(\"submitForm called\")\r\n        e.preventDefault();\r\n        if (!val) return;\r\n        addTodo(val);\r\n        console.log(val);\r\n        setVal('');\r\n        \r\n    }\r\n    return(\r\n        <form>\r\n            <input type=\"text\" placeholder=\"add toDo...\" className=\"input\" value={val} onChange={e => setVal(e.target.value)} />\r\n            <button onClick={submitForm}>Add</button>\r\n        </form>\r\n    )   \r\n}    \r\n\r\n\r\n//returns the tasks which are not completed\r\nfunction getIncompleteItems(value:any) {\r\n    return value.isCompleted == false && value.text !=\"\";\r\n  }\r\n \r\n//used to get all the todos  \r\nfunction getItems(value:any) {\r\n    return value.text !=\"\";\r\n  }\r\n\r\n  \r\n//renders all the todos\r\nexport const Todo: React.FC =()=>{\r\nlet savedItems:any = localStorage.getItem('todos');\r\nsavedItems = JSON.parse(savedItems);\r\nlet dummy:any =[{text:'',isCompleted:false}]\r\nconst [todos, setTodos] = useState<any>(savedItems||dummy)\r\nconsole.log(todos);\r\n\r\nconst addTodo= (text:string)=> {\r\n    \r\n    let newTodos = [...todos,{ text:text,isCompleted:false }]\r\n    if (newTodos[0].text ==''){\r\n        newTodos.splice(0,1);\r\n        \r\n    }\r\n    setTodos(newTodos);\r\n    \r\n}\r\n\r\n\r\nconst completeTodo = (index:number) =>{\r\n    const newTodos = [...todos]\r\n    newTodos[index].isCompleted = !newTodos[index].isCompleted;\r\n    setTodos(newTodos);\r\n}\r\n\r\nconst removeTodo = (index:number)=>{\r\n    const newTodos = [...todos]\r\n    newTodos.splice(index,1)\r\n    setTodos(newTodos);\r\n}\r\nconst totalItems = todos.filter(getItems)\r\nReact.useEffect(() => {\r\n    localStorage.setItem('todos', JSON.stringify(todos));\r\n  }, [JSON.stringify(todos)]);\r\n\r\nreturn(\r\n    <div className='todo-list'>\r\n        Total Todos Remaining : {todos.filter(getIncompleteItems).length} out of {totalItems.length}\r\n        {todos.map((todo:any,index:number)=>(\r\n            <DisplayInfo  index={index} todoText={todo} completeTodo={completeTodo} removeTodo={removeTodo}/>\r\n            \r\n        ))}\r\n        \r\n        <TodoInput addTodo={addTodo}/>\r\n    </div>\r\n        \r\n)\r\n\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Todo} from './todo'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Todo />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}